<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/group6/digitalnotes/view/View.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/group6/digitalnotes/view/View.java" />
              <option name="originalContent" value="package com.group6.digitalnotes.view;&#10;&#10;import javafx.application.Application;&#10;import javafx.application.Platform;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.input.KeyCode;&#10;import javafx.scene.layout.BorderPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.Priority;&#10;import javafx.scene.layout.VBox;&#10;import javafx.stage.Stage;&#10;import javafx.animation.Timeline;&#10;import javafx.animation.KeyFrame;&#10;import javafx.util.Duration;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class View extends Application {&#10;&#10;    private Timeline timer;&#10;    private int timeRemaining = 15 * 60; // 15 minutes in seconds&#10;    private boolean isTimerRunning = false;&#10;    private Label timerLabel;&#10;    private TextArea contentArea;&#10;    private TextField titleField;&#10;    private ListView&lt;String&gt; listView;&#10;&#10;    // Add a map to store note contents&#10;    private Map&lt;String, String&gt; noteContents = new HashMap&lt;&gt;();&#10;&#10;    private Stage primaryStage;&#10;    private boolean isHidden = true; // Changed to true so sidebar starts hidden&#10;    private VBox sidebar; // Add this field to store sidebar reference&#10;    private Button notesBtn; // Replace openBtn with notesBtn&#10;    private VBox openButtonContainer; // Add this field&#10;&#10;    @Override&#10;    public void start(Stage primaryStage) {&#10;        try {&#10;            // Load the main view FXML file&#10;            this.primaryStage = primaryStage;&#10;&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/fxml/MainView.fxml&quot;));&#10;            BorderPane root = loader.load();&#10;&#10;            // Create scene&#10;            Scene scene = new Scene(root, 800, 600);&#10;&#10;            // Set up the stage&#10;            primaryStage.setTitle(&quot;Digital Notes Application&quot;);&#10;            primaryStage.setScene(scene);&#10;            primaryStage.setMinWidth(600);&#10;            primaryStage.setMinHeight(400);&#10;            primaryStage.show();&#10;&#10;            // Add keyboard shortcut&#10;            scene.setOnKeyPressed(e -&gt; {&#10;                if (e.getCode() == KeyCode.H &amp;&amp; e.isControlDown()) {&#10;                    toggleSidebarVisibility();&#10;                }&#10;            });&#10;&#10;            primaryStage.setOnCloseRequest(e -&gt; Platform.exit()); // Normal close behavior&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            // Fallback to simple view if FXML fails&#10;            createFallbackView(primaryStage);&#10;        }&#10;    }&#10;&#10;    private void createFallbackView(Stage primaryStage) {&#10;        BorderPane root = new BorderPane();&#10;        root.setStyle(&quot;-fx-border-width: 0; -fx-background-color: #e0e0e2;&quot;); // Darker gray background&#10;&#10;        // Convert sidebar to note history/list view instead&#10;        sidebar = new VBox(5);&#10;        sidebar.setStyle(&quot;-fx-padding: 5px; -fx-background-color: #d0d0d0; -fx-pref-width: 150px; -fx-border-width: 0;&quot;); // Darker gray sidebar&#10;&#10;        // Add note list to sidebar&#10;        listView = new ListView&lt;&gt;();&#10;        listView.setStyle(&quot;-fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-font-size: 11px; -fx-background-color: #d0d0d0;&quot;); // Match sidebar&#10;&#10;        // Add sample content for sample notes&#10;        noteContents.put(&quot;Sample Note 1&quot;, &quot;This is the content of sample note 1.&quot;);&#10;        noteContents.put(&quot;Sample Note 2&quot;, &quot;This is the content of sample note 2.&quot;);&#10;        noteContents.put(&quot;Sample Note 3&quot;, &quot;This is the content of sample note 3.&quot;);&#10;&#10;        // Make the listView fill the available vertical space&#10;        VBox.setVgrow(listView, Priority.ALWAYS);&#10;&#10;        // Add components to sidebar&#10;        sidebar.getChildren().addAll(&#10;            listView&#10;        );&#10;&#10;        // Create main content area with note editor&#10;        VBox mainContent = new VBox(5);&#10;        mainContent.setStyle(&quot;-fx-padding: 15px; -fx-border-width: 0; -fx-background-color: #e0e0e2;&quot;); // Match root background&#10;&#10;        titleField = new TextField();&#10;        titleField.setPromptText(&quot;Title...&quot;);&#10;        titleField.setStyle(&quot;-fx-font-size: 14px; -fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-pref-height: 25px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: #f9f9f9;&quot;);&#10;        titleField.setEditable(false); // Initially disable title editing&#10;&#10;        contentArea = new TextArea();&#10;        contentArea.setPromptText(&quot;Start writing notes...&quot;);&#10;        contentArea.setWrapText(true);&#10;        contentArea.setStyle(&quot;-fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-font-size: 12px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: #f9f9f9;&quot;);&#10;        contentArea.setEditable(false); // Initially disable content editing&#10;&#10;        // Make the content area expand to fill available space&#10;        VBox.setVgrow(contentArea, Priority.ALWAYS);&#10;&#10;        // Create button bar with all buttons (except save which is now handled by timer)&#10;        HBox buttonBar = new HBox(10);&#10;        buttonBar.setStyle(&quot;-fx-border-width: 0; -fx-alignment: bottom-right; -fx-padding: 5px;&quot;);&#10;&#10;        // Create new button and add to button bar&#10;        Button newNoteBtn = new Button(&quot;New&quot;);&#10;        newNoteBtn.setStyle(&quot;-fx-background-color: transparent; -fx-border-width: 0; -fx-font-size: 8px; -fx-cursor: hand; -fx-text-fill: #000000; -fx-padding: 2px;&quot;);&#10;&#10;        // Remove save button and keep delete button&#10;        Button deleteBtn = new Button(&quot;Del&quot;);&#10;        deleteBtn.setStyle(&quot;-fx-background-color: transparent; -fx-border-width: 0; -fx-font-size: 8px; -fx-cursor: hand; -fx-text-fill: #000000; -fx-padding: 2px;&quot;);&#10;&#10;        // Replace hide/open buttons with a single &quot;Notes&quot; button&#10;        notesBtn = new Button(&quot;Notes&quot;);&#10;        notesBtn.setStyle(&quot;-fx-background-color: transparent; -fx-border-width: 0; -fx-font-size: 8px; -fx-cursor: hand; -fx-text-fill: #000000; -fx-padding: 2px;&quot;);&#10;        notesBtn.setOnAction(e -&gt; toggleSidebarVisibility());&#10;&#10;        // Create timer label for button bar&#10;        timerLabel = new Label(&quot;15:00&quot;);&#10;        timerLabel.setStyle(&quot;-fx-font-size: 12px; -fx-text-fill: #000000; -fx-border-width: 0; -fx-cursor: hand; -fx-font-family: 'System';&quot;);&#10;&#10;        // Add all buttons to button bar (without separate hide/open buttons)&#10;        buttonBar.getChildren().addAll(newNoteBtn, deleteBtn, notesBtn, timerLabel);&#10;&#10;        mainContent.getChildren().addAll(&#10;            titleField,&#10;            contentArea,&#10;            buttonBar&#10;        );&#10;&#10;        // Set up timer functionality&#10;        setupTimer();&#10;&#10;        // Set up event handlers&#10;        newNoteBtn.setOnAction(e -&gt; {&#10;            titleField.clear();&#10;            contentArea.clear();&#10;            contentArea.setPromptText(&quot;Start writing...&quot;);&#10;            // Keep the main content view as is&#10;        });&#10;&#10;        // Update the timer click handler to handle both start and save functionality&#10;        timerLabel.setOnMouseClicked(e -&gt; toggleTimer());&#10;&#10;        deleteBtn.setOnAction(e -&gt; {&#10;            String selectedNote = listView.getSelectionModel().getSelectedItem();&#10;            if (selectedNote != null) {&#10;                // Remove the selected note from the list and the content map&#10;                listView.getItems().remove(selectedNote);&#10;                noteContents.remove(selectedNote);&#10;&#10;                // If the current note being displayed is the one we're deleting, clear the fields&#10;                if (titleField.getText().equals(selectedNote)) {&#10;                    titleField.clear();&#10;                    contentArea.clear();&#10;                }&#10;&#10;                showNotification(&quot;Note deleted!&quot;);&#10;            } else {&#10;                showNotification(&quot;Please select a note to delete!&quot;);&#10;            }&#10;        });&#10;&#10;        listView.setOnMouseClicked(e -&gt; {&#10;            String selected = listView.getSelectionModel().getSelectedItem();&#10;            if (selected != null) {&#10;                titleField.setText(selected);&#10;                // Retrieve the actual content for the selected note&#10;                String content = noteContents.get(selected);&#10;                contentArea.setText(content != null ? content : &quot;&quot;);&#10;            }&#10;        });&#10;&#10;        // Set initial layout - don't add sidebar since it should start hidden&#10;        // root.setRight(sidebar); // Removed this line&#10;        root.setCenter(mainContent);&#10;&#10;        // Create scene with darker gray background color&#10;        Scene scene = new Scene(root, 800, 600);&#10;        scene.setOnKeyPressed(e -&gt; {&#10;            if (e.getCode() == KeyCode.H &amp;&amp; e.isControlDown()) {&#10;                toggleSidebarVisibility();&#10;            }&#10;        });&#10;        scene.getRoot().setStyle(&quot;-fx-background-color: #e0e0e2;&quot;); // Set background for entire scene&#10;&#10;        primaryStage.setOnCloseRequest(e -&gt; Platform.exit());&#10;&#10;        primaryStage.setTitle(&quot;Digital Notes&quot;);&#10;        primaryStage.setScene(scene);&#10;        primaryStage.setMinWidth(600);&#10;        primaryStage.setMinHeight(400);&#10;        primaryStage.show();&#10;    }&#10;&#10;    private void setupTimer() {&#10;        timer = new Timeline(new KeyFrame(Duration.seconds(1), e -&gt; updateTimer()));&#10;        timer.setCycleCount(Timeline.INDEFINITE);&#10;        updateTimerDisplay();&#10;    }&#10;&#10;    // Replace startTimerOnce with toggleTimer to handle both starting and saving&#10;    private void toggleTimer() {&#10;        if (!isTimerRunning) {&#10;            startTimer();&#10;        } else {&#10;            saveAndStopTimer();&#10;        }&#10;    }&#10;&#10;    private void startTimer() {&#10;        isTimerRunning = true;&#10;        timerLabel.setStyle(&quot;-fx-font-size: 12px; -fx-text-fill: #333333; -fx-cursor: default; -fx-font-family: 'System';&quot;);&#10;        timer.play();&#10;&#10;        // Enable writing for both title and content&#10;        titleField.setEditable(true);&#10;        titleField.setPromptText(&quot;Title...&quot;);&#10;        titleField.setStyle(&quot;-fx-font-size: 14px; -fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-pref-height: 25px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: white;&quot;);&#10;&#10;        contentArea.setEditable(true);&#10;        contentArea.setPromptText(&quot;Start writing...&quot;);&#10;        contentArea.setStyle(&quot;-fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-font-size: 12px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: white;&quot;);&#10;&#10;        // Clear fields for new note&#10;        titleField.clear();&#10;        contentArea.clear();&#10;&#10;        // Focus on the text area for writing&#10;        contentArea.requestFocus();&#10;    }&#10;&#10;    private void saveAndStopTimer() {&#10;        // Save the current note&#10;        String title = titleField.getText().trim();&#10;        String content = contentArea.getText().trim();&#10;&#10;        if (title.isEmpty() &amp;&amp; !content.isEmpty()) {&#10;            title = &quot;Timed Session - &quot; + java.time.LocalDateTime.now().format(&#10;                java.time.format.DateTimeFormatter.ofPattern(&quot;MM-dd HH:mm&quot;));&#10;            titleField.setText(title);&#10;        }&#10;&#10;        if (!title.isEmpty() &amp;&amp; !content.isEmpty()) {&#10;            System.out.println(&quot;Saving note: &quot; + title);&#10;            if (!listView.getItems().contains(title)) {&#10;                listView.getItems().add(title);&#10;            }&#10;            // Store the content with the title&#10;            noteContents.put(title, content);&#10;            showNotification(&quot;Note saved!&quot;);&#10;        }&#10;&#10;        // Stop and reset timer&#10;        resetTimerAndFields();&#10;    }&#10;&#10;    private void resetTimerAndFields() {&#10;        timer.stop();&#10;        isTimerRunning = false;&#10;        timeRemaining = 15 * 60;&#10;        timerLabel.setStyle(&quot;-fx-font-size: 12px; -fx-text-fill: #000000; -fx-cursor: hand; -fx-font-family: 'System';&quot;);&#10;        updateTimerDisplay();&#10;&#10;        // Disable writing for both title and content&#10;        titleField.setEditable(false);&#10;        titleField.setStyle(&quot;-fx-font-size: 14px; -fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-pref-height: 25px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: #f9f9f9;&quot;);&#10;&#10;        contentArea.setEditable(false);&#10;        contentArea.setStyle(&quot;-fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-font-size: 12px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: #f9f9f9;&quot;);&#10;&#10;        // Clear fields for new note&#10;        titleField.clear();&#10;        contentArea.clear();&#10;        contentArea.setPromptText(&quot;Press the timer to start writing...&quot;);&#10;    }&#10;&#10;    private void updateTimer() {&#10;        timeRemaining--;&#10;        updateTimerDisplay();&#10;&#10;        if (timeRemaining &lt;= 0) {&#10;            timerFinished();&#10;        } else if (timeRemaining &lt;= 60) {&#10;            // Change color to dark red when less than 1 minute&#10;            timerLabel.setStyle(&quot;-fx-font-size: 12px; -fx-text-fill: #8B0000; -fx-font-family: 'System';&quot;); // Removed bold&#10;        }&#10;    }&#10;&#10;    private void updateTimerDisplay() {&#10;        int minutes = timeRemaining / 60;&#10;        int seconds = timeRemaining % 60;&#10;        timerLabel.setText(String.format(&quot;%02d:%02d&quot;, minutes, seconds));&#10;    }&#10;&#10;    private void timerFinished() {&#10;        // Save the current note automatically&#10;        String title = titleField.getText().trim();&#10;        String content = contentArea.getText().trim();&#10;&#10;        if (title.isEmpty() &amp;&amp; !content.isEmpty()) {&#10;            title = &quot;Timed Session - &quot; + java.time.LocalDateTime.now().format(&#10;                java.time.format.DateTimeFormatter.ofPattern(&quot;MM-dd HH:mm&quot;));&#10;            titleField.setText(title);&#10;        }&#10;&#10;        if (!title.isEmpty() &amp;&amp; !content.isEmpty()) {&#10;            if (!listView.getItems().contains(title)) {&#10;                listView.getItems().add(title);&#10;            }&#10;            // Store the content with the title&#10;            noteContents.put(title, content);&#10;            showNotification(&quot;Time's up! Note saved automatically.&quot;);&#10;        } else {&#10;            showNotification(&quot;Time's up!&quot;);&#10;        }&#10;&#10;        // Reset timer and prepare for new note&#10;        resetTimerAndFields();&#10;    }&#10;&#10;    private void showNotification(String message) {&#10;        System.out.println(&quot;Notification: &quot; + message);&#10;&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(&quot;Notes&quot;);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void toggleSidebarVisibility() {&#10;        BorderPane root = (BorderPane) primaryStage.getScene().getRoot();&#10;&#10;        if (isHidden) {&#10;            root.setRight(sidebar);&#10;            isHidden = false;&#10;        } else {&#10;            root.setRight(null);&#10;            isHidden = true;&#10;        }&#10;    }&#10;&#10;    public static void launchApp(String[] args) {&#10;        Application.launch(View.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.group6.digitalnotes.view;&#10;&#10;import javafx.application.Application;&#10;import javafx.application.Platform;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.input.KeyCode;&#10;import javafx.scene.layout.BorderPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.Priority;&#10;import javafx.scene.layout.VBox;&#10;import javafx.stage.Stage;&#10;import javafx.animation.Timeline;&#10;import javafx.animation.KeyFrame;&#10;import javafx.util.Duration;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class View extends Application {&#10;&#10;    private Timeline timer;&#10;    private int timeRemaining = 15 * 60; // 15 minutes in seconds&#10;    private boolean isTimerRunning = false;&#10;    private Label timerLabel;&#10;    private TextArea contentArea;&#10;    private TextField titleField;&#10;    private ListView&lt;String&gt; listView;&#10;&#10;    // Add a map to store note contents&#10;    private Map&lt;String, String&gt; noteContents = new HashMap&lt;&gt;();&#10;&#10;    private Stage primaryStage;&#10;    private boolean isHidden = true; // Changed to true so sidebar starts hidden&#10;    private VBox sidebar; // Add this field to store sidebar reference&#10;    private Button notesBtn; // Replace openBtn with notesBtn&#10;    private VBox openButtonContainer; // Add this field&#10;&#10;    @Override&#10;    public void start(Stage primaryStage) {&#10;        try {&#10;            // Load the main view FXML file&#10;            this.primaryStage = primaryStage;&#10;&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/fxml/MainView.fxml&quot;));&#10;            BorderPane root = loader.load();&#10;&#10;            // Create scene&#10;            Scene scene = new Scene(root, 800, 600);&#10;&#10;            // Set up the stage&#10;            primaryStage.setTitle(&quot;Digital Notes Application&quot;);&#10;            primaryStage.setScene(scene);&#10;            primaryStage.setMinWidth(600);&#10;            primaryStage.setMinHeight(400);&#10;            primaryStage.show();&#10;&#10;            // Add keyboard shortcut&#10;            scene.setOnKeyPressed(e -&gt; {&#10;                if (e.getCode() == KeyCode.H &amp;&amp; e.isControlDown()) {&#10;                    toggleSidebarVisibility();&#10;                }&#10;            });&#10;&#10;            primaryStage.setOnCloseRequest(e -&gt; Platform.exit()); // Normal close behavior&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            // Fallback to simple view if FXML fails&#10;            createFallbackView(primaryStage);&#10;        }&#10;    }&#10;&#10;    private void createFallbackView(Stage primaryStage) {&#10;        BorderPane root = new BorderPane();&#10;        root.setStyle(&quot;-fx-border-width: 0; -fx-background-color: white;&quot;); // Changed back to white&#10;&#10;        // Convert sidebar to note history/list view instead&#10;        sidebar = new VBox(5);&#10;        sidebar.setStyle(&quot;-fx-padding: 5px; -fx-background-color: #f8f8f8; -fx-pref-width: 150px; -fx-border-width: 0;&quot;); // Changed back to light gray&#10;&#10;        // Add note list to sidebar&#10;        listView = new ListView&lt;&gt;();&#10;        listView.setStyle(&quot;-fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-font-size: 11px; -fx-background-color: #f8f8f8;&quot;); // Match sidebar&#10;&#10;        // Add sample content for sample notes&#10;        noteContents.put(&quot;Sample Note 1&quot;, &quot;This is the content of sample note 1.&quot;);&#10;        noteContents.put(&quot;Sample Note 2&quot;, &quot;This is the content of sample note 2.&quot;);&#10;        noteContents.put(&quot;Sample Note 3&quot;, &quot;This is the content of sample note 3.&quot;);&#10;&#10;        // Make the listView fill the available vertical space&#10;        VBox.setVgrow(listView, Priority.ALWAYS);&#10;&#10;        // Add components to sidebar&#10;        sidebar.getChildren().addAll(&#10;            listView&#10;        );&#10;&#10;        // Create main content area with note editor&#10;        VBox mainContent = new VBox(5);&#10;        mainContent.setStyle(&quot;-fx-padding: 15px; -fx-border-width: 0; -fx-background-color: white;&quot;); // Changed back to white&#10;&#10;        titleField = new TextField();&#10;        titleField.setPromptText(&quot;Title...&quot;);&#10;        titleField.setStyle(&quot;-fx-font-size: 14px; -fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-pref-height: 25px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: #f9f9f9;&quot;);&#10;        titleField.setEditable(false); // Initially disable title editing&#10;&#10;        contentArea = new TextArea();&#10;        contentArea.setPromptText(&quot;Start writing notes...&quot;);&#10;        contentArea.setWrapText(true);&#10;        contentArea.setStyle(&quot;-fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-font-size: 12px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: #f9f9f9;&quot;);&#10;        contentArea.setEditable(false); // Initially disable content editing&#10;&#10;        // Make the content area expand to fill available space&#10;        VBox.setVgrow(contentArea, Priority.ALWAYS);&#10;&#10;        // Create button bar with all buttons (except save which is now handled by timer)&#10;        HBox buttonBar = new HBox(10);&#10;        buttonBar.setStyle(&quot;-fx-border-width: 0; -fx-alignment: bottom-right; -fx-padding: 5px;&quot;);&#10;&#10;        // Create new button and add to button bar&#10;        Button newNoteBtn = new Button(&quot;New&quot;);&#10;        newNoteBtn.setStyle(&quot;-fx-background-color: transparent; -fx-border-width: 0; -fx-font-size: 8px; -fx-cursor: hand; -fx-text-fill: #000000; -fx-padding: 2px;&quot;);&#10;&#10;        // Remove save button and keep delete button&#10;        Button deleteBtn = new Button(&quot;Del&quot;);&#10;        deleteBtn.setStyle(&quot;-fx-background-color: transparent; -fx-border-width: 0; -fx-font-size: 8px; -fx-cursor: hand; -fx-text-fill: #000000; -fx-padding: 2px;&quot;);&#10;&#10;        // Replace hide/open buttons with a single &quot;Notes&quot; button&#10;        notesBtn = new Button(&quot;Notes&quot;);&#10;        notesBtn.setStyle(&quot;-fx-background-color: transparent; -fx-border-width: 0; -fx-font-size: 8px; -fx-cursor: hand; -fx-text-fill: #000000; -fx-padding: 2px;&quot;);&#10;        notesBtn.setOnAction(e -&gt; toggleSidebarVisibility());&#10;&#10;        // Create timer label for button bar&#10;        timerLabel = new Label(&quot;15:00&quot;);&#10;        timerLabel.setStyle(&quot;-fx-font-size: 12px; -fx-text-fill: #000000; -fx-border-width: 0; -fx-cursor: hand; -fx-font-family: 'System';&quot;);&#10;&#10;        // Add all buttons to button bar (without separate hide/open buttons)&#10;        buttonBar.getChildren().addAll(newNoteBtn, deleteBtn, notesBtn, timerLabel);&#10;&#10;        mainContent.getChildren().addAll(&#10;            titleField,&#10;            contentArea,&#10;            buttonBar&#10;        );&#10;&#10;        // Set up timer functionality&#10;        setupTimer();&#10;&#10;        // Set up event handlers&#10;        newNoteBtn.setOnAction(e -&gt; {&#10;            titleField.clear();&#10;            contentArea.clear();&#10;            contentArea.setPromptText(&quot;Start writing...&quot;);&#10;            // Keep the main content view as is&#10;        });&#10;&#10;        // Update the timer click handler to handle both start and save functionality&#10;        timerLabel.setOnMouseClicked(e -&gt; toggleTimer());&#10;&#10;        deleteBtn.setOnAction(e -&gt; {&#10;            String selectedNote = listView.getSelectionModel().getSelectedItem();&#10;            if (selectedNote != null) {&#10;                // Remove the selected note from the list and the content map&#10;                listView.getItems().remove(selectedNote);&#10;                noteContents.remove(selectedNote);&#10;&#10;                // If the current note being displayed is the one we're deleting, clear the fields&#10;                if (titleField.getText().equals(selectedNote)) {&#10;                    titleField.clear();&#10;                    contentArea.clear();&#10;                }&#10;&#10;                showNotification(&quot;Note deleted!&quot;);&#10;            } else {&#10;                showNotification(&quot;Please select a note to delete!&quot;);&#10;            }&#10;        });&#10;&#10;        listView.setOnMouseClicked(e -&gt; {&#10;            String selected = listView.getSelectionModel().getSelectedItem();&#10;            if (selected != null) {&#10;                titleField.setText(selected);&#10;                // Retrieve the actual content for the selected note&#10;                String content = noteContents.get(selected);&#10;                contentArea.setText(content != null ? content : &quot;&quot;);&#10;            }&#10;        });&#10;&#10;        // Set initial layout - don't add sidebar since it should start hidden&#10;        // root.setRight(sidebar); // Removed this line&#10;        root.setCenter(mainContent);&#10;&#10;        // Create scene with white background color&#10;        Scene scene = new Scene(root, 800, 600);&#10;        scene.setOnKeyPressed(e -&gt; {&#10;            if (e.getCode() == KeyCode.H &amp;&amp; e.isControlDown()) {&#10;                toggleSidebarVisibility();&#10;            }&#10;        });&#10;        scene.getRoot().setStyle(&quot;-fx-background-color: white;&quot;); // Set background for entire scene back to white&#10;&#10;        primaryStage.setOnCloseRequest(e -&gt; Platform.exit());&#10;&#10;        primaryStage.setTitle(&quot;Digital Notes&quot;);&#10;        primaryStage.setScene(scene);&#10;        primaryStage.setMinWidth(600);&#10;        primaryStage.setMinHeight(400);&#10;        primaryStage.show();&#10;    }&#10;&#10;    private void setupTimer() {&#10;        timer = new Timeline(new KeyFrame(Duration.seconds(1), e -&gt; updateTimer()));&#10;        timer.setCycleCount(Timeline.INDEFINITE);&#10;        updateTimerDisplay();&#10;    }&#10;&#10;    // Replace startTimerOnce with toggleTimer to handle both starting and saving&#10;    private void toggleTimer() {&#10;        if (!isTimerRunning) {&#10;            startTimer();&#10;        } else {&#10;            saveAndStopTimer();&#10;        }&#10;    }&#10;&#10;    private void startTimer() {&#10;        isTimerRunning = true;&#10;        timerLabel.setStyle(&quot;-fx-font-size: 12px; -fx-text-fill: #333333; -fx-cursor: default; -fx-font-family: 'System';&quot;);&#10;        timer.play();&#10;&#10;        // Enable writing for both title and content (keep these as they were)&#10;        titleField.setEditable(true);&#10;        titleField.setPromptText(&quot;Title...&quot;);&#10;        titleField.setStyle(&quot;-fx-font-size: 14px; -fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-pref-height: 25px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: white;&quot;);&#10;&#10;        contentArea.setEditable(true);&#10;        contentArea.setPromptText(&quot;Start writing...&quot;);&#10;        contentArea.setStyle(&quot;-fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-font-size: 12px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: white;&quot;);&#10;&#10;        // Clear fields for new note&#10;        titleField.clear();&#10;        contentArea.clear();&#10;&#10;        // Focus on the text area for writing&#10;        contentArea.requestFocus();&#10;    }&#10;&#10;    private void saveAndStopTimer() {&#10;        // Save the current note&#10;        String title = titleField.getText().trim();&#10;        String content = contentArea.getText().trim();&#10;&#10;        if (title.isEmpty() &amp;&amp; !content.isEmpty()) {&#10;            title = &quot;Timed Session - &quot; + java.time.LocalDateTime.now().format(&#10;                java.time.format.DateTimeFormatter.ofPattern(&quot;MM-dd HH:mm&quot;));&#10;            titleField.setText(title);&#10;        }&#10;&#10;        if (!title.isEmpty() &amp;&amp; !content.isEmpty()) {&#10;            System.out.println(&quot;Saving note: &quot; + title);&#10;            if (!listView.getItems().contains(title)) {&#10;                listView.getItems().add(title);&#10;            }&#10;            // Store the content with the title&#10;            noteContents.put(title, content);&#10;            showNotification(&quot;Note saved!&quot;);&#10;        }&#10;&#10;        // Stop and reset timer&#10;        resetTimerAndFields();&#10;    }&#10;&#10;    private void resetTimerAndFields() {&#10;        timer.stop();&#10;        isTimerRunning = false;&#10;        timeRemaining = 15 * 60;&#10;        timerLabel.setStyle(&quot;-fx-font-size: 12px; -fx-text-fill: #000000; -fx-cursor: hand; -fx-font-family: 'System';&quot;);&#10;        updateTimerDisplay();&#10;&#10;        // Disable writing for both title and content&#10;        titleField.setEditable(false);&#10;        titleField.setStyle(&quot;-fx-font-size: 14px; -fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-pref-height: 25px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: #f9f9f9;&quot;);&#10;&#10;        contentArea.setEditable(false);&#10;        contentArea.setStyle(&quot;-fx-border-width: 0; -fx-background-radius: 0; -fx-border-radius: 0; -fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-font-size: 12px; -fx-text-fill: #000000; -fx-prompt-text-fill: #555555; -fx-font-family: 'System'; -fx-background-color: #f9f9f9;&quot;);&#10;&#10;        // Clear fields for new note&#10;        titleField.clear();&#10;        contentArea.clear();&#10;        contentArea.setPromptText(&quot;Press the timer to start writing...&quot;);&#10;    }&#10;&#10;    private void updateTimer() {&#10;        timeRemaining--;&#10;        updateTimerDisplay();&#10;&#10;        if (timeRemaining &lt;= 0) {&#10;            timerFinished();&#10;        } else if (timeRemaining &lt;= 60) {&#10;            // Change color to dark red when less than 1 minute&#10;            timerLabel.setStyle(&quot;-fx-font-size: 12px; -fx-text-fill: #8B0000; -fx-font-family: 'System';&quot;); // Removed bold&#10;        }&#10;    }&#10;&#10;    private void updateTimerDisplay() {&#10;        int minutes = timeRemaining / 60;&#10;        int seconds = timeRemaining % 60;&#10;        timerLabel.setText(String.format(&quot;%02d:%02d&quot;, minutes, seconds));&#10;    }&#10;&#10;    private void timerFinished() {&#10;        // Save the current note automatically&#10;        String title = titleField.getText().trim();&#10;        String content = contentArea.getText().trim();&#10;&#10;        if (title.isEmpty() &amp;&amp; !content.isEmpty()) {&#10;            title = &quot;Timed Session - &quot; + java.time.LocalDateTime.now().format(&#10;                java.time.format.DateTimeFormatter.ofPattern(&quot;MM-dd HH:mm&quot;));&#10;            titleField.setText(title);&#10;        }&#10;&#10;        if (!title.isEmpty() &amp;&amp; !content.isEmpty()) {&#10;            if (!listView.getItems().contains(title)) {&#10;                listView.getItems().add(title);&#10;            }&#10;            // Store the content with the title&#10;            noteContents.put(title, content);&#10;            showNotification(&quot;Time's up! Note saved automatically.&quot;);&#10;        } else {&#10;            showNotification(&quot;Time's up!&quot;);&#10;        }&#10;&#10;        // Reset timer and prepare for new note&#10;        resetTimerAndFields();&#10;    }&#10;&#10;    private void showNotification(String message) {&#10;        System.out.println(&quot;Notification: &quot; + message);&#10;&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(&quot;Notes&quot;);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void toggleSidebarVisibility() {&#10;        BorderPane root = (BorderPane) primaryStage.getScene().getRoot();&#10;&#10;        if (isHidden) {&#10;            root.setRight(sidebar);&#10;            isHidden = false;&#10;        } else {&#10;            root.setRight(null);&#10;            isHidden = true;&#10;        }&#10;    }&#10;&#10;    public static void launchApp(String[] args) {&#10;        Application.launch(View.class, args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>