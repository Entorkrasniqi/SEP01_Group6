<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/group6/digitalnotes/controller/MainViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/group6/digitalnotes/controller/MainViewController.java" />
              <option name="originalContent" value="package com.group6.digitalnotes.controller;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.fxml.Initializable;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.layout.BorderPane;&#10;import javafx.scene.layout.VBox;&#10;&#10;import java.io.IOException;&#10;import java.net.URL;&#10;import java.util.ResourceBundle;&#10;&#10;public class MainViewController implements Initializable {&#10;&#10;    @FXML private BorderPane mainLayout;&#10;    @FXML private VBox sideBar;&#10;    @FXML private Button newNoteBtn;&#10;    @FXML private Button allNotesBtn;&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        setupEventHandlers();&#10;        loadNotesList();&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        newNoteBtn.setOnAction(event -&gt; createNewNote());&#10;        allNotesBtn.setOnAction(event -&gt; showAllNotes());&#10;    }&#10;&#10;    @FXML&#10;    private void createNewNote() {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/fxml/NoteEditor.fxml&quot;));&#10;            VBox noteEditor = loader.load();&#10;            NoteEditorController controller = loader.getController();&#10;            controller.setNewNoteMode(true);&#10;            mainLayout.setCenter(noteEditor);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void showAllNotes() {&#10;        loadNotesList();&#10;    }&#10;&#10;    private void loadNotesList() {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/fxml/NoteList.fxml&quot;));&#10;            VBox noteList = loader.load();&#10;            NoteListController controller = loader.getController();&#10;            controller.refreshNotes();&#10;            mainLayout.setCenter(noteList);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.group6.digitalnotes.controller;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.fxml.Initializable;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.layout.BorderPane;&#10;import javafx.scene.layout.VBox;&#10;&#10;import java.io.IOException;&#10;import java.net.URL;&#10;import java.util.ResourceBundle;&#10;&#10;public class MainViewController implements Initializable {&#10;&#10;    @FXML private BorderPane mainLayout;&#10;    @FXML private VBox sideBar;&#10;    @FXML private Button newNoteBtn;&#10;    @FXML private Button allNotesBtn;&#10;    &#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        setupEventHandlers();&#10;        loadNotesList();&#10;    }&#10;    &#10;    private void setupEventHandlers() {&#10;        newNoteBtn.setOnAction(event -&gt; createNewNote());&#10;        allNotesBtn.setOnAction(event -&gt; showAllNotes());&#10;    }&#10;    &#10;    @FXML&#10;    private void createNewNote() {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/fxml/NoteEditor.fxml&quot;));&#10;            VBox noteEditor = loader.load();&#10;            NoteEditorController controller = loader.getController();&#10;            controller.setNewNoteMode(true);&#10;            mainLayout.setCenter(noteEditor);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    &#10;    @FXML&#10;    private void showAllNotes() {&#10;        loadNotesList();&#10;    }&#10;    &#10;    private void loadNotesList() {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/fxml/NoteList.fxml&quot;));&#10;            VBox noteList = loader.load();&#10;            NoteListController controller = loader.getController();&#10;            controller.refreshNotes();&#10;            mainLayout.setCenter(noteList);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/group6/digitalnotes/controller/NoteEditorController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/group6/digitalnotes/controller/NoteEditorController.java" />
              <option name="originalContent" value="package com.group6.digitalnotes.controller;&#10;&#10;import com.group6.digitalnotes.model.Note;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.TextArea;&#10;import javafx.scene.control.TextField;&#10;&#10;import java.net.URL;&#10;import java.util.ResourceBundle;&#10;&#10;public class NoteEditorController implements Initializable {&#10;&#10;    @FXML private TextField titleField;&#10;    @FXML private TextArea contentArea;&#10;    @FXML private Button saveBtn;&#10;    @FXML private Button deleteBtn;&#10;&#10;    private boolean isNewNote = false;&#10;    private String currentNoteId;&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        setupEventHandlers();&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        saveBtn.setOnAction(event -&gt; saveNote());&#10;        deleteBtn.setOnAction(event -&gt; deleteNote());&#10;&#10;        // Auto-save functionality (optional)&#10;        titleField.textProperty().addListener((obs, oldText, newText) -&gt; markAsModified());&#10;        contentArea.textProperty().addListener((obs, oldText, newText) -&gt; markAsModified());&#10;    }&#10;&#10;    public void setNewNoteMode(boolean isNew) {&#10;        this.isNewNote = isNew;&#10;        if (isNew) {&#10;            titleField.clear();&#10;            contentArea.clear();&#10;            deleteBtn.setDisable(true);&#10;        }&#10;    }&#10;&#10;    public void loadNote(String noteId) {&#10;        this.currentNoteId = noteId;&#10;        this.isNewNote = false;&#10;        // TODO: Load note from backend&#10;        titleField.setText(&quot;Sample Title&quot;);&#10;        contentArea.setText(&quot;Sample content...&quot;);&#10;        deleteBtn.setDisable(false);&#10;    }&#10;&#10;    @FXML&#10;    private void saveNote() {&#10;        String title = titleField.getText().trim();&#10;        String content = contentArea.getText();&#10;&#10;        if (title.isEmpty()) {&#10;            // TODO: Show validation error&#10;            return;&#10;        }&#10;&#10;        // TODO: Save to backend&#10;        if (isNewNote) {&#10;            createNewNoteInBackend(title, content);&#10;        } else {&#10;            updateNoteInBackend(currentNoteId, title, content);&#10;        }&#10;&#10;        System.out.println(&quot;Note saved: &quot; + title);&#10;    }&#10;&#10;    @FXML&#10;    private void deleteNote() {&#10;        if (!isNewNote &amp;&amp; currentNoteId != null) {&#10;            // TODO: Delete from backend&#10;            deleteNoteFromBackend(currentNoteId);&#10;            System.out.println(&quot;Note deleted&quot;);&#10;        }&#10;    }&#10;&#10;    private void markAsModified() {&#10;        // TODO: Add visual indication that note has unsaved changes&#10;    }&#10;&#10;    // Backend integration placeholders&#10;    private void createNewNoteInBackend(String title, String content) {&#10;        // TODO: Implement backend call to create note&#10;    }&#10;&#10;    private void updateNoteInBackend(String noteId, String title, String content) {&#10;        // TODO: Implement backend call to update note&#10;    }&#10;&#10;    private void deleteNoteFromBackend(String noteId) {&#10;        // TODO: Implement backend call to delete note&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.group6.digitalnotes.controller;&#10;&#10;import com.group6.digitalnotes.model.Note;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.TextArea;&#10;import javafx.scene.control.TextField;&#10;&#10;import java.net.URL;&#10;import java.util.ResourceBundle;&#10;&#10;public class NoteEditorController implements Initializable {&#10;    &#10;    @FXML private TextField titleField;&#10;    @FXML private TextArea contentArea;&#10;    @FXML private Button saveBtn;&#10;    @FXML private Button deleteBtn;&#10;    &#10;    private boolean isNewNote = false;&#10;    private String currentNoteId;&#10;    &#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        setupEventHandlers();&#10;    }&#10;    &#10;    private void setupEventHandlers() {&#10;        saveBtn.setOnAction(event -&gt; saveNote());&#10;        deleteBtn.setOnAction(event -&gt; deleteNote());&#10;        &#10;        // Auto-save functionality (optional)&#10;        titleField.textProperty().addListener((obs, oldText, newText) -&gt; markAsModified());&#10;        contentArea.textProperty().addListener((obs, oldText, newText) -&gt; markAsModified());&#10;    }&#10;    &#10;    public void setNewNoteMode(boolean isNew) {&#10;        this.isNewNote = isNew;&#10;        if (isNew) {&#10;            titleField.clear();&#10;            contentArea.clear();&#10;            deleteBtn.setDisable(true);&#10;        }&#10;    }&#10;    &#10;    public void loadNote(String noteId) {&#10;        this.currentNoteId = noteId;&#10;        this.isNewNote = false;&#10;        // TODO: Load note from backend&#10;        titleField.setText(&quot;Sample Title&quot;);&#10;        contentArea.setText(&quot;Sample content...&quot;);&#10;        deleteBtn.setDisable(false);&#10;    }&#10;    &#10;    @FXML&#10;    private void saveNote() {&#10;        String title = titleField.getText().trim();&#10;        String content = contentArea.getText();&#10;        &#10;        if (title.isEmpty()) {&#10;            // TODO: Show validation error&#10;            return;&#10;        }&#10;        &#10;        // TODO: Save to backend&#10;        if (isNewNote) {&#10;            createNewNoteInBackend(title, content);&#10;        } else {&#10;            updateNoteInBackend(currentNoteId, title, content);&#10;        }&#10;        &#10;        System.out.println(&quot;Note saved: &quot; + title);&#10;    }&#10;    &#10;    @FXML&#10;    private void deleteNote() {&#10;        if (!isNewNote &amp;&amp; currentNoteId != null) {&#10;            // TODO: Delete from backend&#10;            deleteNoteFromBackend(currentNoteId);&#10;            System.out.println(&quot;Note deleted&quot;);&#10;        }&#10;    }&#10;    &#10;    private void markAsModified() {&#10;        // TODO: Add visual indication that note has unsaved changes&#10;    }&#10;    &#10;    // Backend integration placeholders&#10;    private void createNewNoteInBackend(String title, String content) {&#10;        // TODO: Implement backend call to create note&#10;    }&#10;    &#10;    private void updateNoteInBackend(String noteId, String title, String content) {&#10;        // TODO: Implement backend call to update note&#10;    }&#10;    &#10;    private void deleteNoteFromBackend(String noteId) {&#10;        // TODO: Implement backend call to delete note&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/group6/digitalnotes/controller/NoteListController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/group6/digitalnotes/controller/NoteListController.java" />
              <option name="originalContent" value="package com.group6.digitalnotes.controller;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.scene.control.ListView;&#10;import javafx.scene.control.TextField;&#10;&#10;import java.net.URL;&#10;import java.util.ResourceBundle;&#10;&#10;public class NoteListController implements Initializable {&#10;&#10;    @FXML private ListView&lt;String&gt; noteListView;&#10;    @FXML private TextField searchField;&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        setupSearchField();&#10;        loadNotesFromBackend();&#10;    }&#10;&#10;    private void setupSearchField() {&#10;        searchField.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            filterNotes(newValue);&#10;        });&#10;    }&#10;&#10;    public void refreshNotes() {&#10;        loadNotesFromBackend();&#10;    }&#10;&#10;    private void loadNotesFromBackend() {&#10;        // TODO: Connect to backend service&#10;        // For now, add sample data&#10;        noteListView.getItems().clear();&#10;        noteListView.getItems().addAll(&#10;            &quot;Sample Note 1&quot;,&#10;            &quot;Sample Note 2&quot;,&#10;            &quot;Sample Note 3&quot;&#10;        );&#10;    }&#10;&#10;    private void filterNotes(String searchText) {&#10;        // TODO: Implement search filtering with backend&#10;        System.out.println(&quot;Searching for: &quot; + searchText);&#10;    }&#10;&#10;    @FXML&#10;    private void onNoteSelected() {&#10;        String selectedNote = noteListView.getSelectionModel().getSelectedItem();&#10;        if (selectedNote != null) {&#10;            // TODO: Open note in editor&#10;            System.out.println(&quot;Selected note: &quot; + selectedNote);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.group6.digitalnotes.controller;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.scene.control.ListView;&#10;import javafx.scene.control.TextField;&#10;&#10;import java.net.URL;&#10;import java.util.ResourceBundle;&#10;&#10;public class NoteListController implements Initializable {&#10;    &#10;    @FXML private ListView&lt;String&gt; noteListView;&#10;    @FXML private TextField searchField;&#10;    &#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        setupSearchField();&#10;        loadNotesFromBackend();&#10;    }&#10;    &#10;    private void setupSearchField() {&#10;        searchField.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            filterNotes(newValue);&#10;        });&#10;    }&#10;    &#10;    public void refreshNotes() {&#10;        loadNotesFromBackend();&#10;    }&#10;    &#10;    private void loadNotesFromBackend() {&#10;        // TODO: Connect to backend service&#10;        // For now, add sample data&#10;        noteListView.getItems().clear();&#10;        noteListView.getItems().addAll(&#10;            &quot;Sample Note 1&quot;,&#10;            &quot;Sample Note 2&quot;, &#10;            &quot;Sample Note 3&quot;&#10;        );&#10;    }&#10;    &#10;    private void filterNotes(String searchText) {&#10;        // TODO: Implement search filtering with backend&#10;        System.out.println(&quot;Searching for: &quot; + searchText);&#10;    }&#10;    &#10;    @FXML&#10;    private void onNoteSelected() {&#10;        String selectedNote = noteListView.getSelectionModel().getSelectedItem();&#10;        if (selectedNote != null) {&#10;            // TODO: Open note in editor&#10;            System.out.println(&quot;Selected note: &quot; + selectedNote);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>